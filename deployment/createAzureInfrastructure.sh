#!/bin/bash

set -e # stop script execution on failure
set -x

## -------
# Write stdout and stderr to createAzureInfrasture.log.txt file
exec > >(tee "createAzureInfrasture.log.txt")
exec 2>&1

## -------
# Shell script variables
AZURE_SUBSCRIPTION_ID='your subscription id name goes here'
AZURE_REGION='westus2'
AZURE_RESOURCE_GROUP='your resource group name goes here'
AKS_CLUSTER_NAME='your cluster name goes here'
AKS_NODE_COUNT=3
AKS_SERVICE_PRINCIPAL_NAME="http://${AKS_CLUSTER_NAME}-sp"

## -------
# Login to Azure and set the Azure subscription for this script to use
az login
az account set --subscription $AZURE_SUBSCRIPTION_ID

## -------
## Create the resource group for the AKS cluster
az group create -l $AZURE_REGION -n $AZURE_RESOURCE_GROUP

## -------
## Create a service principal to use with the AKS cluster
AKS_SERVICE_PRINCIPAL_PASSWORD=$(az ad sp create-for-rbac --name $AKS_SERVICE_PRINCIPAL_NAME --skip-assignment --query password -o tsv)
AKS_SERVICE_PRINCIPAL_APPID=$(az ad sp show --id $AKS_SERVICE_PRINCIPAL_NAME --query appId -o tsv)

## -------
## Create the AKS cluster
az aks create \
    --resource-group $AZURE_RESOURCE_GROUP \
    --name $AKS_CLUSTER_NAME \
    --node-count $AKS_NODE_COUNT \
    --service-principal $AKS_SERVICE_PRINCIPAL_APPID \
    --client-secret $AKS_SERVICE_PRINCIPAL_PASSWORD \
    --generate-ssh-keys

## -------
# Connect to AKS cluster and get credentials so we can use kubectl
az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AKS_CLUSTER_NAME

## -------
# Apply the Azure K8s storage class to ensure that data is retained in all cases on managed disks
kubectl apply -f azure-storage-class.yaml

## -------
# Apply the persistent volume claim to create the managed disks
kubectl apply -f azure-pv-claim.yaml

## -------
# Sleep for two minutes to give to allow the managed disks to provision fully
sleep 120s

## -------
## Get the resource group that is generated by AKS that contains the AKS nodes
AKS_NODE_RESOURCE_GROUP=$(az aks name -n $AKS_CLUSTER_NAME -g $AZURE_RESOURCE_GROUP --query "[].nodeResourceGroup" -o tsv)

## -------
# Get all VMs in AKS cluster
AKS_VMS=($(az vm list -g ${AKS_NODE_RESOURCE_GROUP} --query "[?contains(name,'aks-nodepool')].name" -o tsv))

## -------
# Get all PVC dynamically created managed disks
AKS_DISKS=($(az disk list -g ${AKS_NODE_RESOURCE_GROUP} --query "[?contains(name,'kubernetes-dynamic-pvc')].name" -o tsv))

## -------
# For each disk, attach it to an AKS node
VM_INDEX=1
for DISK in "${AKS_DISKS[@]}"
do
    echo "Attaching disk ${DISK} to VM ${AKS_VMS[${VM_INDEX}]}"
    $(az vm disk attach -g ${AKS_NODE_RESOURCE_GROUP} --vm-name ${AKS_VMS[${VM_INDEX}]} --name  ${DISK})
    let "VM_INDEX+=1"
done